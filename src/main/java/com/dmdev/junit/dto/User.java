package com.dmdev.junit.dto;

import lombok.Value;

// @Value — это неизменяемый вариант @Data. Все поля делаются приватными и final по умолчанию,
// методы установки значений не генерируются. Класс тоже делается final.
// Так же как и в @Data, методы toString(), equals() и hashCode() methods генерируются,
// каждое поле получает метод получения значения, генерируется конструктор,
// покрывающий все аргументы (кроме полей final, инициализированных при объявлении).

// Чтобы уменьшить бойлерплейт-код при создании объектов для классов с шаблонами,
// можно использовать параметр staticConstructor, чтобы сгенерировать приватный конструктор,
// а также статический метод, возвращающий новый экземпляр.
// В этом случае javac будет выводить тип переменной.
// Таким образом, с объявлением класса @Data(staticConstructor="of") class Foo { private T x;},
// вы можете создавать экземпляры класса Foo так: Foo.of(5);, вместо new Foo(5);.

// Статич. конструктор - фрагмент кода, используемый для инициализации статич. данных,
// означает, что конкрет. задача долж. быть выполнена только 1 раз по всей программе.
// Обычно он вызывается автоматически перед тем, как на какие-либо статич. э-ты ссылаются
// или генерируется первый экземпляр. Стат. конструктор - явно объявлен с использованием
// ключ. слова «static»
@Value(staticConstructor = "of")
public class User {

    Integer id;
    String username;
    String password;
}
